//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/RFG/Input/Scripts/MenuControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace RFG
{
    public partial class @MenuControls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @MenuControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""MenuControls"",
    ""maps"": [
        {
            ""name"": ""MenuActionMap"",
            ""id"": ""47215929-cb30-4cac-96ba-bcddb05144f1"",
            ""actions"": [
                {
                    ""name"": ""CloseMenu"",
                    ""type"": ""Button"",
                    ""id"": ""b1ec2bd3-6e7c-46df-9bff-de13eaea2c3e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""019bb5e5-5bc9-4b83-b974-f19903430955"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // MenuActionMap
            m_MenuActionMap = asset.FindActionMap("MenuActionMap", throwIfNotFound: true);
            m_MenuActionMap_CloseMenu = m_MenuActionMap.FindAction("CloseMenu", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // MenuActionMap
        private readonly InputActionMap m_MenuActionMap;
        private IMenuActionMapActions m_MenuActionMapActionsCallbackInterface;
        private readonly InputAction m_MenuActionMap_CloseMenu;
        public struct MenuActionMapActions
        {
            private @MenuControls m_Wrapper;
            public MenuActionMapActions(@MenuControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @CloseMenu => m_Wrapper.m_MenuActionMap_CloseMenu;
            public InputActionMap Get() { return m_Wrapper.m_MenuActionMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MenuActionMapActions set) { return set.Get(); }
            public void SetCallbacks(IMenuActionMapActions instance)
            {
                if (m_Wrapper.m_MenuActionMapActionsCallbackInterface != null)
                {
                    @CloseMenu.started -= m_Wrapper.m_MenuActionMapActionsCallbackInterface.OnCloseMenu;
                    @CloseMenu.performed -= m_Wrapper.m_MenuActionMapActionsCallbackInterface.OnCloseMenu;
                    @CloseMenu.canceled -= m_Wrapper.m_MenuActionMapActionsCallbackInterface.OnCloseMenu;
                }
                m_Wrapper.m_MenuActionMapActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @CloseMenu.started += instance.OnCloseMenu;
                    @CloseMenu.performed += instance.OnCloseMenu;
                    @CloseMenu.canceled += instance.OnCloseMenu;
                }
            }
        }
        public MenuActionMapActions @MenuActionMap => new MenuActionMapActions(this);
        public interface IMenuActionMapActions
        {
            void OnCloseMenu(InputAction.CallbackContext context);
        }
    }
}
